Custom Version of OpenRC (via Artix PKGBUILD)
---------------------------------------------

NOTE: Besides 'openrc', 'elogind' should also be rebuild removing the 'artix-sysvcompat' dependecy.

1) Download the Artix repository from Gitea or GitHub. First of all, create a build directory, cd into it, and clone the repo:

$ mkdir build && cd build
$ git clone https://gitea.artixlinux.org/artixlinux/packages-openrc.git
or
$ git clone https://github.com/artix-linux/packages.git

NOTE: The GitHub repository seems to be older than the Gitea one (i.e., out of date).

You'll get all of the openrc Artix PKGBUILD's (not only for openrc as such)

2) Go to 'packages/openrc/repos/core-x86_64'. You'll find there the files needed to compile openrc and, of course, the PKGBUILD. Edit the PKGBUILD and make all the changes you want, like removing unwanted dependencies, services, files, and the like. This is completely up to you, but here's an example: 

"pkgname=('openrc' 'openrc-bash-completions' 'openrc-zsh-completions')" 
could be just:
"pkgname=('openrc')"

makedepends=('psmisc' 'pam' 'netifrc' 'opentmpfiles-openrc'
            'opensysusers-openrc' 'elogind-openrc' 'zsh')
could be just (we don't need these extra dependencies):
makedepends=('psmisc' 'pam')

package_openrc() {
    depends=('psmisc' 'pam' 'opentmpfiles-openrc' 'opensysusers-openrc' 'netifrc' 'elogind-openrc')
could be just:
package_openrc() {
    depends=('psmisc' 'pam')


for num in 1 2 3 4 5 6;do
    cp -v ${pkgdir}/etc/conf.d/agetty ${pkgdir}/etc/conf.d/agetty.tty$num
    ln -sf /etc/init.d/agetty ${pkgdir}/etc/init.d/agetty.tty$num
    ln -sf /etc/init.d/agetty.tty$num ${pkgdir}/etc/runlevels/default/agetty.tty$num
done
could be (if you just want TTY1 enabled by default):
    cp -v ${pkgdir}/etc/conf.d/agetty ${pkgdir}/etc/conf.d/agetty.tty1
    ln -sf /etc/init.d/agetty ${pkgdir}/etc/init.d/agetty.tty1
    ln -sf /etc/init.d/agetty.tty1 ${pkgdir}/etc/runlevels/default/agetty.tty1

Comment (or delete) these lines (if you don't use zsh)
    # split zsh completions
#    install -d ${srcdir}/_zsh/usr/share/zsh/site-functions
#    mv -v ${pkgdir}/usr/share/zsh/site-functions/* ${srcdir}/_zsh/usr/share/zsh/site-functions

And these too:
#package_openrc-bash-completions() {
#    depends=('openrc' 'bash')
#    pkgdesc="OpenRC completions for Bash"
#
#    mv -v ${srcdir}/_bash-completion/* ${pkgdir}
#}
#
#package_openrc-zsh-completions() {
#    depends=('openrc' 'zsh')
#    pkgdesc="OpenRC completions for ZSH"
#
#    mv -v ${srcdir}/_zsh/* ${pkgdir}
#}

NOTE: The BRANDING variable (the blue "Starting up whatever_distro (arch)" line printed when starting openrc) is taken here from '/usr/lib/os-release'. In other words, it takes the name of the OS where the compilation is made. So, there's no need to change this variable. If you want, however, you can use a fixed string for it, like this: "BRANDING='Arch Linux'".

NOTE 2: Of course, you can now remove the remaining packages in the packages directory.

3) Run 'makepkg' and install the package with 'pacman':

$ makepkg
# pacman -U pkg_name_version.pkg.tar.gz

You can check if there is a new openrc version avaible via this command:

$ curl -s https://github.com/OpenRC/openrc/releases | grep -m1 "archive" | cut -d"/" -f5 | cut -d'"' -f1 | sed 's/\.zip//g'

Or you can write a bash alias for it:
alias openrc_cur_ver=$'curl -s https://github.com/OpenRC/openrc/releases | grep -m1 "archive" | cut -d"/" -f5 | cut -d\'"\' -f1 | sed \'s/.zip//g\''

NOTE: 'openrc' devs use only three version fields, for example "0.42.1". Everything else, say, the 3 in "0.42.1-3", comes from the distribution.

If there is one, upgrade your package by repeating this process. In this case, recall to edit the "pkgver" variable in the PKGBUILD.
